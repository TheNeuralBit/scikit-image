import numpy as np
from numpy.testing import assert_array_equal, run_module_suite

from skimage.transform import swt

class TestStrokeWidthTransform:
    def test_basic(self):
        x = np.array([[1, 1, 1, 1, 1, 1, 1, 1],
                      [1, 1, 1, 1, 1, 1, 1, 1],
                      [1, 1, 1, 0, 0, 1, 1, 1],
                      [1, 1, 1, 0, 0, 1, 1, 1],
                      [1, 1, 1, 0, 0, 1, 1, 1],
                      [1, 1, 1, 0, 0, 1, 1, 1],
                      [1, 1, 1, 0, 0, 1, 1, 1],
                      [1, 1, 1, 0, 0, 1, 1, 1],
                      [1, 1, 1, 0, 0, 1, 1, 1],
                      [1, 1, 1, 1, 1, 1, 1, 1],
                      [1, 1, 1, 1, 1, 1, 1, 1]], np.float32)

        widths = np.array([[255, 255, 255, 255, 255, 255, 255, 255],
                           [255, 255, 255, 255, 255, 255, 255, 255],
                           [255, 255, 255, 255, 255, 255, 255, 255],
                           [255, 255,   3,   3,   3,   3, 255, 255],
                           [255, 255,   3,   3,   3,   3, 255, 255],
                           [255, 255,   3,   3,   3,   3, 255, 255],
                           [255, 255,   3,   3,   3,   3, 255, 255],
                           [255, 255,   3,   3,   3,   3, 255, 255],
                           [255, 255, 255, 255, 255, 255, 255, 255],
                           [255, 255, 255, 255, 255, 255, 255, 255],
                           [255, 255, 255, 255, 255, 255, 255, 255]])
        assert_array_equal(swt(x), widths)

    def test_light_on_dark(self):
        x = np.array([[0, 0, 0, 0, 0, 0, 0, 0],
                      [0, 0, 0, 0, 0, 0, 0, 0],
                      [0, 0, 0, 1, 1, 0, 0, 0],
                      [0, 0, 0, 1, 1, 0, 0, 0],
                      [0, 0, 0, 1, 1, 0, 0, 0],
                      [0, 0, 0, 1, 1, 0, 0, 0],
                      [0, 0, 0, 1, 1, 0, 0, 0],
                      [0, 0, 0, 1, 1, 0, 0, 0],
                      [0, 0, 0, 1, 1, 0, 0, 0],
                      [0, 0, 0, 0, 0, 0, 0, 0],
                      [0, 0, 0, 0, 0, 0, 0, 0]], np.float32)

        widths = np.array([[255, 255, 255, 255, 255, 255, 255, 255],
                           [255, 255, 255, 255, 255, 255, 255, 255],
                           [255, 255, 255, 255, 255, 255, 255, 255],
                           [255, 255,   3,   3,   3,   3, 255, 255],
                           [255, 255,   3,   3,   3,   3, 255, 255],
                           [255, 255,   3,   3,   3,   3, 255, 255],
                           [255, 255,   3,   3,   3,   3, 255, 255],
                           [255, 255,   3,   3,   3,   3, 255, 255],
                           [255, 255, 255, 255, 255, 255, 255, 255],
                           [255, 255, 255, 255, 255, 255, 255, 255],
                           [255, 255, 255, 255, 255, 255, 255, 255]])
        print(swt(x, dark_on_light=False))
        assert_array_equal(swt(x, dark_on_light=False), widths)

    def test_l_shape(self):
        x = np.array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                      [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                      [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                      [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                      [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                      [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                      [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                      [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                      [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                      [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                      [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
                      [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
                      [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
                      [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
                      [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
                      [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
                      [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                      [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], np.float32)

        b = 255
        widths = np.array([[b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b],
                           [b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b],
                           [b, b, b, 9, 7, 9, b, b, b, b, b, b, b, b, b, b, b],
                           [b, b, 4, 9, 7, 9, 4, b, b, b, b, b, b, b, b, b, b],
                           [b, b, 4, 9, 7, 9, 4, b, b, b, b, b, b, b, b, b, b],
                           [b, b, 5, 9, 7, 9, 5, 5, b, b, b, b, b, b, b, b, b],
                           [b, b, 5, 9, 7, 9, 5, 5, b, b, b, b, b, b, b, b, b],
                           [b, b, 5, 9, 7, 9, 5, 5, b, b, b, b, b, b, b, b, b],
                           [b, b, 5, 9, 7, 9, 5, 5, b, b, b, b, b, b, b, b, b],
                           [b, b, b, 9, 7, 9, b, 7, 6, 6, 6, b, b, b, b, b, b],
                           [b, b, b, 9, 7, 9, 7, b, 6, 6, 6, 5, 5, 5, b, b, b],
                           [b, b, 7, 9, 7, 9, 7, 7, 6, 6, 6, 5, 5, 5, 7, b, b],
                           [b, b, 7, 9, 7, 9, 7, 7, 6, 6, 6, 5, 5, 5, 7, b, b],
                           [b, b, 7, 9, 7, 9, 7, 7, 6, 6, 6, 5, 5, 5, 7, b, b],
                           [b, b, 7, 9, 7, 9, 7, 7, 6, 6, 6, 5, 5, 5, 7, b, b],
                           [b, b, 7, 9, 7, 9, b, b, 6, 6, 6, 5, 5, 5, b, b, b],
                           [b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b],
                           [b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b]])


        assert_array_equal(swt(x), widths)

if __name__ == "__main__":
    run_module_suite()
